@model Dental_Clinic_System.Areas.Admin.ViewModels.AppointmentVM

@{
    ViewData["Title"] = "GetAppointmentStatus";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";

    var yearOptions = new System.Text.StringBuilder();
    for (int year = DateTime.Now.Year; year >= DateTime.Now.Year - 10; year--)
    {
        var selected = year == Model.SelectedYear ? "selected=\"selected\"" : "";
        yearOptions.AppendFormat("<option value=\"{0}\" {1}>{0}</option>", year, selected);
    }
}

<style>
    .dashboard__info__chartDai {
        width: 57%;
        height: 500px
    }

    .dashboard__info__chartTron {
        display: block;
        box-sizing: border-box;
        height: 360px;
        width: 25%;
    }

    .charts-container {
        display: flex;
        justify-content: space-around;
        align-items: center;
        margin: 20px 0;
    }

</style>

<div class="dashboard__info">
    <h1 class="dashboard__info__title mb-0">Dashboard</h1>
    <div class="dashboard__info__cards d-flex flex-row">
        <div class="card-item">
            <p>Tổng đặt khám thành công</p>
            <p class="nums">@Model.SuccessfulAppointments</p>
            <img src="~/assets/images/user.png" alt="" />
        </div>

        <div class="card-item">
            <p>Tổng đặt khám thất bại</p>
            <p class="nums">@Model.FailedAppointments</p>
            <img src="~/assets/images/user.png" alt="" />
        </div>
    </div>

    </br>
    <!-- Year Selection Dropdown -->
    <div class="year-selection">
        <label for="yearSelect">Chọn năm:</label>
        <select id="yearSelect" onchange="location = this.value;">
            @Html.Raw(yearOptions.ToString())
        </select>
    </div>

    <!-- ============ CHART ============ -->
    <div class="charts-container">
        <div class="dashboard__info__chartDai">
            <canvas id="myChart" style="width: 100%; height: 400px"></canvas>
            </br>
            <h5 style="text-align: center">Tổng đặt khám thành công/thất bại của mỗi tháng trong 1 năm</h5>
        </div>
        <div class="dashboard__info__chartTron">
            <canvas id="dailyChart" style="width: 100%; height: 300px"></canvas>
            </br>
            <h5 style="text-align: center">Đặt khám thành công/thất bại trong ngày</h5>
        </div>
    </div>

</div>

@section Scripts {
    @* <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> *@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var yearSelect = document.getElementById('yearSelect');
            yearSelect.addEventListener('change', function () {
                var selectedYear = this.value;
                var url = '@Url.Action("GetAppointmentStatus", "Dashboard", new { area = "Admin", year = "__year__" })';
                window.location.href = url.replace("__year__", selectedYear);
            });

            var ctx = document.getElementById('myChart').getContext('2d');
            var successfulData = @Html.Raw(Json.Serialize(Model.MonthlySuccessfulAppointments));
            var failedData = @Html.Raw(Json.Serialize(Model.MonthlyFailedAppointments));

            var currentYear = new Date().getFullYear();
            var currentMonth = new Date().getMonth() + 1;
            var monthLabels = [];

            if (@Model.SelectedYear == currentYear) {
                monthLabels = Array.from({ length: currentMonth }, (v, i) => `Tháng ${i + 1}`);
                successfulData = successfulData.slice(0, currentMonth);
                failedData = failedData.slice(0, currentMonth);
            } else {
                monthLabels = Array.from({ length: 12 }, (v, i) => `Tháng ${i + 1}`);
            }

            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: monthLabels,
                    datasets: [{
                        label: 'Tổng đặt khám thành công',
                        data: successfulData,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 2,
                        fill: false,
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(75, 192, 192, 1)'
                    }, {
                        label: 'Tổng đặt khám thất bại',
                        data: failedData,
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderWidth: 2,
                        fill: false,
                        pointBackgroundColor: 'rgba(255, 99, 132, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(255, 99, 132, 1)'
                    }]
                },
                options: {
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                color: 'rgba(75, 192, 192, 1)'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: 'rgba(75, 192, 192, 1)'
                            },
                            grid: {
                                color: 'rgba(75, 192, 192, 0.2)'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: 'rgba(75, 192, 192, 1)',
                                stepSize: 5,
                                callback: function (value, index, values) {
                                    if (value > 50) {
                                        return '>50';
                                    }
                                    return value;
                                }
                            },
                            grid: {
                                color: 'rgba(75, 192, 192, 0.2)'
                            }
                        }
                    }
                }
            });

            var dailyCtx = document.getElementById('dailyChart').getContext('2d');
            var successfulToday = @Model.SuccessfulAppointmentsToday;
            var failedToday = @Model.FailedAppointmentsToday;

            console.log('Successful today:', successfulToday);
            console.log('Failed today:', failedToday);

            var dailyChart = new Chart(dailyCtx, {
                type: 'pie',
                data: {
                    labels: ['Đặt khám thành công', 'Đặt khám thất bại'],
                    datasets: [{
                        data: [successfulToday, failedToday],
                        backgroundColor: [
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(255, 99, 132, 0.2)'
                        ],
                        borderColor: [
                            'rgba(75, 192, 192, 1)',
                            'rgba(255, 99, 132, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });

        });
    </script>
}
